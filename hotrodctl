#!/bin/bash

[ -n "$HOTROD_DEBUG" ] && {
  set -x
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STARTTIME=$(date +%s)
cd $DIR

usage() {
    echo "Usage:"
    echo "hotrodctl start"
    echo "hotrodctl stop"
    echo "hotrodctl restart SERVICENAME"
    echo "hotrodctl enter SERVICENAME"
    exit 1
}

COMMAND=$1

[ $# -gt 0 ] || usage

shift 1

[ -n "$SERVER_VERSION" ] && {

#Install Docker
VERSION=$(apt-cache policy docker-engine | grep Installed | awk '{ print $2; }')
echo $VERSION | grep $SERVER_VERSION 1>/dev/null

[ $? != 0 ] && {
  echo "Updating Docker"
  apt-get update
  CANDIDATE=$(apt-cache policy docker-engine | grep $SERVER_VERSION | grep -v ':' | awk '{ print $1; }')
  apt-get install -y docker-engine=$CANDIDATE
}

}

declare -a RUNLEVELS=("core" "0" "1" "2")

supervise() {
  set -e
  
  while true; do
    
    for runlevel in ${RUNLEVELS[@]}; do
      CANDIDATES=$(docker ps -a -q --format '{{.Names}}' --filter status=exited --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME --filter label=za.co.panoptix.hotrod.startorder=$runlevel)
      [ -n "$CANDIDATES" ] &&  {
        echo "Start hotrod containers runlevel $runlevel..."
        docker start $CANDIDATES 
      }
    done
    sleep 30
    
  done
}

stopall() {
  CANDIDATES=$(docker ps -q --filter status=running --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME --filter name=_hotrodctl_)
  [ -n "$CANDIDATES" ] &&  {
    echo 'Stop hotrodctl...'
    timeout 10 docker stop --time=5 $CANDIDATES 
    docker stop --time=5 $CANDIDATES
  }
  CANDIDATES=$(docker ps -q --filter status=running --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME)
  [ -n "$CANDIDATES" ] &&  {
    echo 'Stop hotrod containers...'
    docker stop --time=45 $CANDIDATES 
  }
}

svcrestart() {
  CONTAINER=$1
  CANDIDATES=$(docker ps -q --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME --filter name=$CONTAINER)
  [ -n "$CANDIDATES" ] &&  {
    echo 'Restart container...'
    docker restart $CANDIDATES 
  }
}

hotrod_diag(){

  cpuUsageM=$(grep 'cpu ' /proc/stat | awk '{cpu_usage=($2+$4)*100/($2+$4+$5)} END {print cpu_usage }')
  LoadAverage1=$(uptime | perl -pe 's|.+?load\saverage:\s+(?P<one_min>[^,]+),\s+(?P<five_min>[^,]+),\s+(?P<fifteen_min>.+)|\1|')
  memTotalM=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}')
  memTotal1=$memTotalM
  memTotalM=$(echo "scale=1; $memTotal1 / 1024" | bc)
  memUsageM=$(cat /proc/meminfo | grep MemFree | awk '{print $2}')
  memUsageM=$(echo "scale=1; ($memTotal1 - $memUsageM) / 1024" | bc | sed 's/^\./0./')
  memUsagei=$(echo "scale=1; (100/$memTotalM) * $memUsageM" | bc | sed 's/^\./0./')
  uptimerecord=$(uptime -p)

  conatiner_health=$(docker stats --no-stream --format "table {{.Name}}:\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.MemPerc}}")
  running_conatiner=$(docker ps -a -f status=running | wc -l)
  stopped_container=$(docker ps -a -f status=exited)
  datadog=$(docker ps -a -q --format '{{.Names}}' --filter name=docker-dd-agent)
  jobrunner=$(docker ps -a -q --format '{{.Names}}' --filter name=netopsjobs)
  datadogstatus=$(docker exec -it $datadog /etc/init.d/datadog-agent info)
  sysctl=$(sysctl vm.max_map_count)

  echo "" 
  echo "[Hotrod Health Check]"
  echo "UPTIME: $uptimerecord"
  echo "CPU USAGE: $cpuUsageM"
  echo "LOAD AVERAGE: $LoadAverage1"
  echo "TOTAL MEMORY: $memTotalM"
  echo "MEMORY USAGE: $memUsageM"
  echo "SYSCTL: $sysctl"

  echo ""
  echo "[Hotrod Container Check]"
  echo "All conatainters are installed and running"
  echo "$conatiner_health"
  echo ""
  echo "Containers not running(including exited=0)"
  echo "$stopped_container"
  echo ""
  echo "[Datadog Status Report]"
  echo "$datadogstatus"
}


#Setup hotrodctl
[ -n "$HOTROD_PROJNAME" ] && {
  cp /usr/bin/hotrodctl /usr/local/bin/hotrodctl
}

case "$COMMAND" in
    supervise) 
        supervise
        ;;
    svcstop)
        stopall
        ;;
    svcrestart)
        svcrestart $1
        ;;
    stop)
        HOTROD_PROJNAME=$(echo $(docker info 2>/dev/null | grep za.co.panoptix.HotrodProj | head -1| cut -f2 -d'='))
        CANDIDATES=$(docker images | grep hotrodctl | grep -v hotrodctlkeys | head -1 | awk '{ print $1":"$2; }')
        [ -n "$CANDIDATES" ] && {
          docker run --name stop_cmd_runner --rm -v /var/run/docker.sock:/var/run/docker.sock:rw -e DOCKER_HOST=unix:///var/run/docker.sock -e HOTROD_PROJNAME=$HOTROD_PROJNAME $CANDIDATES svcstop
        }
        ;;
    start)
        echo 'Start hotrodctl...'
        docker start $(docker ps -a -q --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname --filter name=_hotrodctl_)
        ;;   
    restart)
        HOTROD_PROJNAME=$(echo $(docker info 2>/dev/null | grep za.co.panoptix.HotrodProj | head -1 | cut -f2 -d'='))    
        CANDIDATES=$(docker images | grep hotrodctl | grep -v hotrodctlkeys | head -1 | awk '{ print $1":"$2; }')
        [ -n "$CANDIDATES" ] && {
          docker run --name restart_cmd_runner_$1 --rm -v /var/run/docker.sock:/var/run/docker.sock:rw -e HOTROD_PROJNAME=$HOTROD_PROJNAME $CANDIDATES svcrestart $1
        }
        ;;
    enter)
        CONTAINER=$1
        COMMAND=$2
        [ -n "$COMMAND" ] || {
           export INTERACTIVE="-it"
           export COMMAND="bash"
        }
        CANDIDATES=$(docker ps --format '{{.Names}}' --filter status=running --filter label=za.co.panoptix.hotrod.projectname --filter name=$CONTAINER)
        [ -n "$CANDIDATES" ] &&  {
          docker exec $INTERACTIVE $(echo $CANDIDATES | cut -f1 -d' ') "$COMMAND"
        }
        ;;
    diag)
       hotrod_diag
        ;;     
    *)
        echo "Unknown hotrodctl command '$COMMAND'" >&2
        usage
        ;;
esac   
